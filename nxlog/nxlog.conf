## UVM Exchange NXLog configuration file

## See the nxlog reference manual about additional configuration options.
## It should be installed locally and is also available online at http://nxlog.org/docs/

define ROOT C:\Program Files (x86)\nxlog

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

<Extension syslog>
    Module      xm_syslog
</Extension>

<Extension json>
    Module      xm_json
</Extension>

<Extension w3c>
	# Extension for w3c-formatted IIS log files.
	#   Tokenizes data in the logs for packaging in JSON or XML.
	#   See: http://nxlog.org/docs/nxlog-ce/nxlog-reference-manual.html#processing_parsers_w3c
	# NOTE: W3C format is flexible.  This configuration will not work for all W3C IIS Logs.
	#   IIS Logging options must be configured to match these expected field values.
	#   Use "Set-IISLogOptions.ps1" in the UVM msx-ops Git repo to configure IIS.
    Module      xm_csv
    Fields	$date, $time, $ServiceName, $ServerIPAddress, $Method, $URIStem, $URIQuery, $ServerPort, $username, $ClientIPAddress, $UserAgent, $Cookie, $Referer, $ProtocolStatus, $ProtocolSubStatus, $Win32Status, $TimeTaken
    FieldTypes  string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
    Delimiter	' '
    EscapeChar  '"'
    QuoteChar   '"'
    EscapeControl FALSE
    UndefValue  -
</Extension>

<Input iislog>
    # Reads IIS Logs recursively from the standard IIS Log directory.
	# - Adds "EventTime" filed by concatenating date + time.
	# - Converts entries to JSON objects.  Use "to_xml()" if XML output is preferred.
    Module        im_file
    File          'C:\inetpub\logs\LogFiles\u_ex*'
    ReadFromLast  FALSE
    Recursive     TRUE
    <Exec>
        if $raw_event =~ /^#/ drop();
        else
        {
            w3c->parse_csv();
            $EventTime = parsedate($date + " " + $time);
			to_json();
        }
    </Exec>
</Input>

<Input winevent>
	# Windows Event Log reader for Vista+
	# See: http://nxlog.org/docs/nxlog-ce/nxlog-reference-manual.html#im_msvistalog
    Module        im_msvistalog
	Exec          $Message = to_json();
    ReadFromLast  FALSE
	
	# QueryXML block uses XPath queries documented in MSDN.
	# Use the Windows Event Viewer MMC filtering function to build queries:
	#  EventVwr.msc -> Select Log -> "Filter Current Log" 
	#  -> Select filtering options -> Select the "XML" tab
	<QueryXML>
       <QueryList>
         <Query Id='1'>
		   <Select Path='Application'>*</Select>
           <Select Path='Security'>*</Select>
		   <Select Path='System'>*</Select>
		   <Select Path='MSExchange Management'>*</Select> 
         </Query>
       </QueryList>
    </QueryXML>
</Input>

<Output out_stoat>
	# Sends collected data to RSysLogD server at "stoat".
	# See: http://nxlog.org/docs/nxlog-ce/nxlog-reference-manual.html#xm_syslog
	#   IETF format preferred over:
	#     "to_syslog_snare()" - as snare format will not send the whole message.
	#     "to_syslog_bsd()" - IETF format is newer, supports multi-line messages and proper timestamps.
    Module      om_udp
    Host        stoat.uvm.edu
    Port        514
    Exec        to_syslog_ietf();
</Output>

<Route 1>
    Path        winevent, iislog => out_stoat
</Route>
