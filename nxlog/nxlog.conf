## UVM Exchange NXLog configuration file

## See the nxlog reference manual about additional configuration options.
## It should be installed locally and is also available online at http://nxlog.org/docs/

define ROOT C:\Program Files (x86)\nxlog

Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
LogFile %ROOT%\data\nxlog.log

<Extension syslog>
    Module      xm_syslog
</Extension>

<Extension json>
    Module      xm_json
</Extension>

<Extension w3c>
	# Extension for w3c-formatted IIS log files.
	#   Tokenizes data in the logs for packaging in JSON or XML.
	#   See: http://nxlog.org/docs/nxlog-ce/nxlog-reference-manual.html#processing_parsers_w3c
	# NOTE: W3C format is flexible.  This configuration will not work for all W3C IIS Logs.
	#   IIS Logging options must be configured to match these expected field values.
	#   Use "Set-IISLogOptions.ps1" in the UVM msx-ops Git repo to configure IIS.
    Module      xm_csv
    Fields	$date, $time, $ServiceName, $ServerIPAddress, $Method, $URIStem, $URIQuery, $ServerPort, $username, $ClientIPAddress, $UserAgent, $Cookie, $Referer, $ProtocolStatus, $ProtocolSubStatus, $Win32Status, $TimeTaken
    #FieldTypes is optional... probably could just delete this!
	FieldTypes  string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string
    Delimiter	' '
    EscapeChar  '"'
    QuoteChar   '"'
    EscapeControl FALSE
    UndefValue  -
</Extension>

<Extension ews>
	Module xm_csv
	Fields $DateTime,$RequestId,$MajorVersion,$MinorVersion,$BuildVersion,$RevisionVersion,$ClientRequestId,$AuthenticationType,$IsAuthenticated,$AuthenticatedUser,$Organization,$UserAgent,$VersionInfo,$ClientIpAddress,$ServerHostName,$FrontEndServer,$SoapAction,$HttpStatus,$RequestSize,$ResponseSize,$ErrorCode,$ImpersonatedUser,$ProxyAsUser,$ActAsUser,$Cookie,$CorrelationGuid,$PrimaryOrProxyServer,$TaskType,$RemoteBackendCount,$LocalMailboxCount,$RemoteMailboxCount,$LocalIdCount,$RemoteIdCount,$BeginBudgetConnections,$EndBudgetConnections,$BeginBudgetHangingConnections,$EndBudgetHangingConnections,$BeginBudgetAD,$EndBudgetAD,$BeginBudgetCAS,$EndBudgetCAS,$BeginBudgetRPC,$EndBudgetRPC,$BeginBudgetFindCount,$EndBudgetFindCount,$BeginBudgetSubscriptions,$EndBudgetSubscriptions,$MDBResource,$MDBHealth,$MDBHistoricalLoad,$ThrottlingPolicy,$ThrottlingDelay,$ThrottlingRequestType,$TotalDCRequestCount,$TotalDCRequestLatency,$TotalMBXRequestCount,$TotalMBXRequestLatency,$RecipientLookupLatency,$ExchangePrincipalLatency,$HttpPipelineLatency,$CheckAccessCoreLatency,$AuthModuleLatency,$CallContextInitLatency,$PreExecutionLatency,$CoreExecutionLatency,$TotalRequestTime,$DetailedExchangePrincipalLatency,$ClientStatistics,$GenericInfo,$AuthenticationErrors,$GenericErrors,$Puid
	Delimiter   ','
	#EscapeChar  '"' #This command inherited from our IISLog config is a problem as single quotes sometimes appear in the logs, which results in the next delimeter getting skipped.
    QuoteChar   '"'
</Extension>

# Imap extension is not ready... it keeps misinterpreting quotes as a quote character vs. quotes as an escape character.
#<Extension imap>
#	Module xm_csv
#	Fields $dateTime,$sessionId,$seqNumber,$sIp,$cIp,$user,$duration,$rqsize,$rpsize,$command,$parameters,$context,$puid
#	Delimiter   ','
#	EscapeChar  '"'
#   QuoteChar   '"'
#</Extension>

<Input iislog>
    # Reads IIS Logs recursively from the standard IIS Log directory.
	# - Adds "EventTime" filed by concatenating date + time.
	# - Converts entries to JSON objects.  Use "to_xml()" if XML output is preferred.
    Module        im_file
    File          'C:\inetpub\logs\LogFiles\u_ex*'
    ReadFromLast  FALSE
	SavePos       TRUE
    Recursive     TRUE
    <Exec>
        if $raw_event =~ /^#/ drop();
        else
        {
            w3c->parse_csv();
            $EventTime = parsedate($date + " " + $time);
			delete($date);
			delete($time);
			to_json();
        }
    </Exec>
</Input>

<Input ewslog>
	# Inspired by ITS and SCOM parsing rules: 
	#   https://gist.github.com/cwhits/a970041f31f288dd2c16
	Module        im_file
	File          'D:\Exchange Server\Logging\Ews\Ews_*'
	ReadFromLast  FALSE
	SavePos       TRUE
    Recursive     FALSE
	<Exec>
        if $raw_event =~ /^#/ drop();
        else
        {
            ews->parse_csv();
			#Delete fields that we don't want to upload... these tend to be very large stack traces.
			delete($GenericInfo);
			delete($AuthenticationErrors);
			delete($GenericErrors);
			to_json();
        }
    </Exec>
</Input>

#<Input imapBackEndlog>
#	# Inspired by ITS and SCOM parsing rules: 
#	#   https://gist.github.com/cwhits/a970041f31f288dd2c16
#	Module        im_file
#	File          'D:\Exchange Server\Logging\Imap4\IMAP4BE*'
#	ReadFromLast  FALSE
#	SavePos       TRUE
#   Recursive     FALSE
#	<Exec>
#        if $raw_event =~ /^#/ drop();
#        else
#        {
#            imap->parse_csv();
#			to_json();
#        }
#    </Exec>
#</Input>

###############################################################################
# Start - Windows Event Log readers for Vista+
#
# See: http://nxlog.org/docs/nxlog-ce/nxlog-reference-manual.html#im_msvistalog
#
# QueryXML block uses XPath queries documented in MSDN.
# Use the Windows Event Viewer MMC filtering function to build queries:
#  EventVwr.msc -> Select Log -> "Filter Current Log" 
#  -> Select filtering options -> Select the "XML" tab
#
<Input Application>
    Module        im_msvistalog
	Exec          $Message = to_json();
    ReadFromLast  TRUE
	SavePos       TRUE
	<QueryXML>
       <QueryList>
         <Query Id='1'>
		   <Select Path='Application'>*</Select>
         </Query>
       </QueryList>
    </QueryXML>
</Input>
<Input Security>
    Module        im_msvistalog
	Exec          $Message = to_json();
    ReadFromLast  TRUE
	SavePos       TRUE
	<QueryXML>
       <QueryList>
         <Query Id='1'>
           <Select Path='Security'>*</Select>
         </Query>
       </QueryList>
    </QueryXML>
</Input>
<Input System>
    Module        im_msvistalog
	Exec          $Message = to_json();
    ReadFromLast  TRUE
	SavePos       TRUE
	<QueryXML>
       <QueryList>
         <Query Id='1'>
		   <Select Path='System'>*</Select>
         </Query>
       </QueryList>
    </QueryXML>
</Input>
<Input MSExchange_Management>
    Module        im_msvistalog
	Exec          $Message = to_json();
    ReadFromLast  TRUE
	SavePos       TRUE
	<QueryXML>
       <QueryList>
         <Query Id='1'>
		   <Select Path='MSExchange Management'>*</Select> 
         </Query>
       </QueryList>
    </QueryXML>
</Input>
# End - Windows Event Log readers for Vista+
###############################################################################


<Output out_stoat>
	# Sends collected data to RSysLogD server at "stoat".
	# See: http://nxlog.org/docs/nxlog-ce/nxlog-reference-manual.html#xm_syslog
	#   IETF format preferred over:
	#     "to_syslog_snare()" - as snare format will not send the whole message.
	#     "to_syslog_bsd()" - IETF format is newer, supports multi-line messages and proper timestamps.
    Module      om_udp
    Host        stoat.uvm.edu
    Port        514
    Exec        to_syslog_ietf();
</Output>

<Route 1>
	Path        Application, System, Security, MSExchange_Management, iislog, ewslog => out_stoat
</Route>
